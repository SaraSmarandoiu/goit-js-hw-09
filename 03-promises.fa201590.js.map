{"mappings":"YAAA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAGPO,SAASC,iBAAiB,oBAAoB,WAC5C,IAAMC,EAAOF,SAASG,cAAc,SAEpCD,EAAKD,iBAAiB,UAAU,SAAUG,GACxCA,EAAMC,iBAEN,IAAMZ,EAAQa,SAASJ,EAAKK,SAASd,MAAMe,OACrCC,EAAOH,SAASJ,EAAKK,SAASE,KAAKD,OACnCE,EAASJ,SAASJ,EAAKK,SAASG,OAAOF,OAEzCG,MAAMlB,IAAUkB,MAAMF,IAASE,MAAMD,GACvCE,SAASC,OAAOC,QAAQ,iDAO5B,SAAwBC,EAAYN,EAAMC,GACxC,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAQM,IAAK,CAI/BzB,EAHiByB,EAAI,EACAD,EAAaN,EAAOO,GAGtCC,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBmB,SAASC,OAAOM,QACd,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGjD4B,OAAM,SAAAH,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBmB,SAASC,OAAOC,QACd,sBAAqCM,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,KAhBnD6B,CAAe7B,EAAOgB,EAAMC,E","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\ndocument.addEventListener('DOMContentLoaded', function () {\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    const delay = parseInt(form.elements.delay.value);\n    const step = parseInt(form.elements.step.value);\n    const amount = parseInt(form.elements.amount.value);\n\n    if (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n      Notiflix.Notify.failure('Please fill in all fields with valid numbers.');\n      return;\n    }\n\n    createPromises(delay, step, amount);\n  });\n\n  function createPromises(firstDelay, step, amount) {\n    for (let i = 0; i < amount; i++) {\n      const position = i + 1;\n      const currentDelay = firstDelay + step * i;\n\n      createPromise(position, currentDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n});\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","addEventListener","form","querySelector","event","preventDefault","parseInt","elements","value","step","amount","isNaN","Notiflix","Notify","failure","firstDelay","i","then","param","success","concat","catch","createPromises"],"version":3,"file":"03-promises.fa201590.js.map"}